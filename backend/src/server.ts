import express, { Request, Response, NextFunction } from 'express';
import multer from 'multer';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import fs from 'fs';
import cors from 'cors';
import { FileMetadata, AuthRequest, UploadResponse } from './types';

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadsDir = path.join(__dirname, '../uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req: Request, file: Express.Multer.File, cb: (error: Error | null, destination: string) => void) => {
    cb(null, uploadsDir);
  },
  filename: (req: Request, file: Express.Multer.File, cb: (error: Error | null, filename: string) => void) => {
    const fileId = uuidv4();
    cb(null, fileId + path.extname(file.originalname));
  }
});

const upload = multer({ storage });

// —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const fileMetadata = new Map<string, FileMetadata>();

//—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ 
function restoreFileMetadata(): void {
  try {
    if (!fs.existsSync(uploadsDir)) return;
    
    const files = fs.readdirSync(uploadsDir);
    files.forEach(filename => {
      const fileId = path.parse(filename).name;
      
      // –µ—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
      if (!fileMetadata.has(fileId)) {
        fileMetadata.set(fileId, {
          id: fileId,
          originalName: filename,
          uploadDate: new Date(),
          lastDownload: null,
          downloadCount: 0
        });
      }
    });
    console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const checkAuth = (req: AuthRequest, res: Response, next: NextFunction): void => {
  const authHeader = req.headers.authorization;
  
  if (authHeader === 'Bearer admin-token') {
    next();
  } else {
    res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
};

//–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
app.post('/api/upload', checkAuth, upload.single('file'), (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const fileId = path.parse(req.file.filename).name;
    
      fileMetadata.set(fileId, {
      id: fileId,
      originalName: req.file.originalname,
      uploadDate: new Date(),
      lastDownload: null,
      downloadCount: 0
    });

    const response: UploadResponse = {
      success: true,
      fileId: fileId,
      downloadUrl: `http://localhost:${PORT}/api/download/${fileId}`
    };

    res.json(response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' });
  }
});

//—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
app.get('/api/download/:fileId', (req: Request, res: Response) => {
  try {
    const fileId = req.params.fileId;
    const metadata = fileMetadata.get(fileId);

    if (!metadata) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    metadata.lastDownload = new Date();
    metadata.downloadCount += 1;
    fileMetadata.set(fileId, metadata);

    const files = fs.readdirSync(uploadsDir);
    const file = files.find(f => f.startsWith(fileId));
    
    if (!file) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const filePath = path.join(uploadsDir, file);
    res.download(filePath, metadata.originalName);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è' });
  }
});

app.get('/api/stats', checkAuth, (req: Request, res: Response) => {
  const stats = Array.from(fileMetadata.values());
  res.json(stats);
});

// –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ 
setInterval(() => {
  const now = new Date();
  const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
  
  let deletedCount = 0;
  
  fileMetadata.forEach((metadata, fileId) => {
    const lastDownload = metadata.lastDownload || metadata.uploadDate;
    
    if (lastDownload < thirtyDaysAgo) {
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      const files = fs.readdirSync(uploadsDir);
      const file = files.find(f => f.startsWith(fileId));
      
      if (file) {
        const filePath = path.join(uploadsDir, file);
        fs.unlinkSync(filePath);
        fileMetadata.delete(fileId);
        deletedCount++;
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${metadata.originalName}`);
      }
    }
  });
  
  if (deletedCount > 0) {
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`);
  }
}, 24 * 60 * 60 * 1000); // —Ä–∞–∑ –≤ –¥–µ–Ω—å

restoreFileMetadata();

// –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∞–∫–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${uploadsDir}`);
  console.log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (30 –¥–Ω–µ–π –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)');
});